C. Array
time limit per test: 2 seconds
memory limit per test: 256 megabytes

Chris the Rabbit has been interested in arrays ever since he was a child. At the moment he is researching arrays with the length of n, containing only integers from 1 to n. He is not good at math, that's why some simple things drive him crazy. For example, yesterday he grew keen on counting how many different beautiful arrays there are. Chris thinks that an array is beautiful if it meets one of the two conditions:

\(\bull\) each elements, starting from the second one, is no more than the preceding one
\(\bull\) each element, starting from the second one, is no less than the preceding one

Having got absolutely mad at himself and at math, Chris came to Stewie and Brian to ask them for help. However, they only laughed at him and said that the answer is too simple and not interesting. Help Chris the Rabbit to find the answer at last.

Input
The single line contains an integer n which is the size of the array (1 ≤ n ≤ \(10^5\)).

Output
You must print the answer on a single line. As it can be rather long, you should print it modulo 1000000007.





\(\bull\) Наивный алгоритм:  
Мы можем сгенерировать все возможные массивы длины \( n \) с помощью целых чисел от 1 до \( n \). Это можно реализовать с помощью рекурсии для создания каждого массива.
Для каждого сгенерированного массива мы проверяем, является ли он неубывающим (каждый элемент меньше или равен следующему) или невозрастающим (каждый элемент больше или равен следующему), проходя по массиву и сравнивая соседние элементы. Если одно из условий выполняется, мы находим красивый массив и можем увеличить счетчик на 1.
Этот метод прост, но имеет временную сложность \( O(n^n) \) из-за экспоненциального числа возможных массивов, что делает его непрактичным для больших значений \( n \).

\(\bull\) Реальный алгоритм:  
Мы можем определить количество красивых массивов, не генерируя всех кандидатов явно, используя теорему "Звёзд и Палок". Красивые массивы определяются как неубывающие или невозрастающие последовательности, сформированные с использованием целых чисел от 1 до \( n \).

Теорема "Звёзд и Палок" утверждает, что количество способов распределить \( n \) недифференцируемых объектов (звёзд) по \( k \) различимым ящикам (палкам) представляется биномиальным коэффициентом \( C(n + k - 1, k - 1) \). Для красивых массивов мы рассматриваем целые числа как ящики, а звёзды — как количество этих целых чисел в массиве.

Чтобы посчитать неубывающие массивы длины \( n \), мы рассматриваем каждое целое число от 1 до \( n \) как ящик и распределяем \( n \) звёзд среди этих ящиков. Количество неубывающих массивов соответствует количеству способов расположить \( n \) звёзд и \( n - 1 \) палок, что задается формулой \( C(2n - 1, n - 1) \). Тот же подход применяется и к невозрастающим массивам.

Поскольку массивы, где все элементы одинаковы, учитываются как в неубывающих, так и в невозрастающих категориях, мы вычитаем \( n \) (количество таких массивов) из общего числа. Таким образом, окончательное количество красивых массивов задается формулой:

\(2 \cdot C(2n - 1, n - 1) - n\)

Этот комбинаторный подход эффективен, с временной сложностью \( O(n) \) для вычисления биномиальных коэффициентов, что делает его подходящим для больших значений \( n \).




#include <bits/stdc++.h>
using namespace std;

int main() {
    int n;
    cin >> n;

    return 0;
}





Как я уже упоминал в блоке 1, ответ составляет \( 2 \cdot C(2n - 1, n - 1) - n \).




#include <bits/stdc++.h>
using namespace std;

const int MOD = 1000000007;

long long nCr(int n, int r, int p) {
    
}

int main() {
    int n;
    cin >> n;

    long long beautifulArrays = (2 * nCr(2 * n - 1, n - 1, MOD) - n + MOD) % MOD;

    cout << beautifulArrays << endl;

    return 0;
}





Мы можем вычислить \( C(n, k) \) с помощью факториалов и обратных чисел, а обратные числа могут быть найдены с помощью быстрого возведения в степень по модулю, где \( f^{-1} \equiv f^{p-2} \mod p \) в соответствии с теоремой Ферма о простых числах.




#include <bits/stdc++.h>
using namespace std;

const int MOD = 1000000007;

long long power(long long x, long long y, long long p) {
    
}

long long nCr(int n, int r, int p) {
    if (r > n) return 0;
    if (r == 0 || r == n) return 1;

    vector<long long> fac(n + 1, 1);
    for (int i = 2; i <= n; ++i)
        fac[i] = fac[i - 1] * i % p;

    return fac[n] * power(fac[r], p - 2, p) % p * power(fac[n - r], p - 2, p) % p;
}

int main() {
    int n;
    cin >> n;

    long long beautifulArrays = (2 * nCr(2 * n - 1, n - 1, MOD) - n + MOD) % MOD;

    cout << beautifulArrays << endl;

    return 0;
}





Быстрое возведение в степень по модулю — это алгоритм, который позволяет эффективно вычислять \( x^y \mod p \) с помощью разбиения показателя степени на двоичные разряды, что значительно сокращает количество необходимых умножений.




#include <bits/stdc++.h>
using namespace std;

const int MOD = 1000000007;

long long power(long long x, long long y, long long p) {
    long long res = 1;
    x = x % p;
    while (y > 0) {
        if (y & 1)
            res = (res * x) % p;
        y = y >> 1;
        x = (x * x) % p;
    }
    return res;
}

long long nCr(int n, int r, int p) {
    if (r > n) return 0;
    if (r == 0 || r == n) return 1;

    vector<long long> fac(n + 1, 1);
    for (int i = 2; i <= n; ++i)
        fac[i] = fac[i - 1] * i % p;

    return fac[n] * power(fac[r], p - 2, p) % p * power(fac[n - r], p - 2, p) % p;
}

int main() {
    int n;
    cin >> n;

    long long beautifulArrays = (2 * nCr(2 * n - 1, n - 1, MOD) - n + MOD) % MOD;

    cout << beautifulArrays << endl;

    return 0;
}





2




3




Рассмотрим пользовательский угловой случай, в котором \( n \) находится на минимальном значении: \( n = 1 \)

1

В этом случае единственным возможным массивом является {1}, который также является допустимым массивом. Следовательно, ответ – 1.




1