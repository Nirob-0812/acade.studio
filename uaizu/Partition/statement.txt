Partition
Time Limit : 1 sec
Memory Limit : 131072 KB

Quick sort is based on the Divide-and-conquer approach. In QuickSort(A, p, r), first, a procedure Partition(A, p, r) divides an array A[p..r] into two subarrays A[p..q-1] and A[q+1..r] such that each element of A[p..q-1] is less than or equal to A[q], which is, inturn, less than or equal to each element of A[q+1..r]. It also computes the index q.

In the conquer processes, the two subarrays A[p..q-1] and A[q+1..r] are sorted by recursive calls of QuickSort(A, p, q-1) and QuickSort(A, q+1, r).

Your task is to read a sequence A and perform the Partition based on the following pseudocode:

<code>
Partition(A, p, r)
1 x = A[r]
2 i = p-1
3 for j = p to r-1
4     do if A[j] <= x
5        then i = i+1
6            exchange A[i] and A[j] 
7 exchange A[i+1] and A[r]
8 return i+1
</code>

Note that, in this algorithm, Partition always selects an element A[r] as a pivot element around which to partition the array A[p..r].

Input
The first line of the input includes an integer n, the number of elements in the sequence A.

In the second line, \(A_i\) (i = 1,2,...,n), elements of the sequence are given separated by space characters.

Output
Print the sorted sequence. Two contiguous elements of the sequence should be separated by a space character. The element which is selected as the pivot of the partition should be indicated by [  ].

Constraints
1 ≤ n ≤ 100,000
0 ≤ \(A_i\) ≤ 100,000





12
13 19 9 5 12 8 7 4 21 2 6 11




Дан псевдокод, который делит массив A[p.. r] на два подмассива A[p.. q-1] и A[q+1..r], и в конечном итоге возвращает позицию индекса q. В этом случае каждый элемент A[p.. q-1] меньше или равно A[q], а A[q] меньше или равно каждому элементу A[q+1..r].
Нам нужно вызвать эту функцию один раз для заданного массива A и изолировать позицию q квадратными скобками.
Так как временная сложность этого псевдокода равна O(r - p), мы можем легко реализовать эту функцию, записать обновления в массив A, а затем отметить положение q квадратными скобками.




#include<bits/stdc++.h>

using namespace std;

int A[101010];

int main() {
    int n; scanf("%d", &n);
    for(int i = 1; i <= n; i++) scanf("%d", A + i);
}




Реализуем данный псевдокод. Нам нужно только написать его как есть, без каких-либо изменений.




#include<bits/stdc++.h>

using namespace std;

int Partition(int *A, int p, int r) {
    int x = A[r];
    int i = p - 1;
    for(int j = p; j <= r - 1; j++) {
        if(A[j] <= x) {
            i = i + 1;
            swap(A[i], A[j]);
        }
    }
    swap(A[i + 1], A[r]);
    return i + 1;
}

int A[101010];

int main() {
    int n; scanf("%d", &n);
    for(int i = 1; i <= n; i++) scanf("%d", A + i);
}




У нас есть значение q, поэтому мы можем изолировать позицию q квадратными скобками.




#include<bits/stdc++.h>

using namespace std;

int Partition(int *A, int p, int r) {
    int x = A[r];
    int i = p - 1;
    for(int j = p; j <= r - 1; j++) {
        if(A[j] <= x) {
            i = i + 1;
            swap(A[i], A[j]);
        }
    }
    swap(A[i + 1], A[r]);
    return i + 1;
}

int A[101010];

int main() {
    int n; scanf("%d", &n);
    for(int i = 1; i <= n; i++) scanf("%d", A + i);
    
    int id = Partition(A, 1, n);
    
    for(int i = 1; i <= n; i++) {
        if(i > 1) putchar(' ');
        if(i == id) printf("[");
        printf("%d", A[i]);
        if(i == id) printf("]");
    }
    puts("");
}




12
13 19 9 5 12 8 7 4 21 2 6 11




Проверим пользовательский тестовый случай, где \(n\) и \(A_i\) находятся на своих минимальных значениях: \(n = 1\) и \(A_i = 0\).

1
0

В этом случае ясно, что \(q = 1\), поэтому мы можем просто изолировать 1-й элемент A как [].
Так что ответ будет "[0]".




1
0