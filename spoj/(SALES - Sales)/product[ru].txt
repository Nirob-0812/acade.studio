SALES - Sales
Time limit:	1s
Source limit:	50000B
Memory limit:	1536MB

Bosco has gotten his hands on B (1≤B≤50) dollars! Being a Magic the Gathering™ enthusiast, he wishes to spend some amount of his budget on cards to improve his deck.

He has located a local store that has N (1≤N≤30,000) cards for sale. Card i costs \(c_i\) (1≤\(c_i\)≤50) dollars, and will improve Bosco’s DQI (Deck Quality Index) by \(v_i (1≤v_i≤1000)\) points. Only one copy of each card is for sale.

Business hasn’t been too great lately, so the store is offering sales on various days. Though the term “price adjustments” would be more accurate, as card prices can increase, “sales” are much more appealing – and, indeed, Bosco wants to go do all of his shopping on one of the D (1≤D≤3000) days of the sales. In fact, he’s already acquired a list of the price adjustments that will be made.

On day i, the cost of card \(a_i (1≤a_i≤N)\) is changed to \(b_i (1≤b_i≤50)\), while all other cards remain unchanged. That is, before day 1, all cards have their initial costs \((c_{1..N})\), and from then on, price adjustments accumulate from day to day.

Additionally, on each day, only certain cards from the store’s inventory are actually up for sale. In particular, on day i, only cards \(x_i\) to \(y_i (1≤x_i≤y_i≤N)\), inclusive, may be purchased.

Bosco doesn’t care how much of his budget he spends, but he absolutely must have the best possible deck. As such, for each of the D days, he wants to consider buying some (possibly empty) set of cards, such that the sum of their costs is no larger than B, and the sum of their DQI points is maximal. Determine this DQI sum for each day, so that Bosco will know when to go to take full advantage of the “sales”.

Input
Line 1: 3 integers, B, N, and D
Next N lines: 2 integers, \(c_i\) and \(v_i\), for i=1..N
Next D lines: 4 integers, \(a_i, b_i, x_i\), and \(y_i\), for i=1..D

Output
For each day, output the maximal DQI sum of cards up for purchase that day which Bosco can purchase without going over his budget, considering all price changes that have occurred so far.

Explanation of Sample:

At first, the 5 cards (with point values 6, 5, 3, 11, and 7, respectively) have costs of 9, 1, 2, 3, and 2 dollars, in that order.

On the first day, the cost of the first card is reduced to 1 dollar, and the first 4 cards are up for purchase.

On the second day, the cost of the fourth card is increased to 6 dollars, and only the last 3 cards can be bought.

On the final day, the cost of card 4 is changed again, this time to 1 dollar, and the first 4 cards are once again considered.

 
On the first day, Bosco should buy the first, second, and fourth cards, costing a total of 5 dollars.

On the second, cards 3 and 5 should be purchased with 4 dollars, as card 4 is now too expensive.

On the final day, all of the cards up for sale can be bought for 5 dollars. Notice that card 1 still costs 1 dollar, from the first price change.




Сначала давайте определим список возможных карт, которые можно купить для каждого дня.  
Для каждого дня мы можем обновить стоимость карты с индексом \(a_i\) до \(b_i\). Затем мы можем рассмотреть множество карт с индексами в интервале \([x_i, y_i]\).  
После этого мы можем пройти по всем возможным подмножествам этого множества карт, чтобы реализовать покупку.  
Для каждого подмножества мы будем вычислять общую стоимость и общее количество очков DQI, проверяя, укладывается ли общая стоимость в бюджет \(B\). Если текущее подмножество можно купить, мы можем максимизировать результат за счёт общего количества очков DQI.  
Временная сложность этого алгоритма составляет \(O(D \cdot 2^N \cdot N)\). Этот алгоритм превышает ограничение по времени, так как \(N\) может достигать 30,000.




Давайте уменьшим временную сложность.

Предположим, что есть несколько карт, каждая из которых стоит \(c\).  
Для каждого дня нам не нужны все карты; нам достаточно взять \(\frac{B}{c}\) карт с наибольшими очками DQI, так как наша цель — максимизировать общую сумму очков DQI при покупках.  
Есть 50 возможных стоимостей карт: 1, 2, ..., 50. (\(1 \leq c_i \leq 50\))  
Сначала подсчитаем максимальное возможное количество карт, которые могут понадобиться для каждого запроса. Максимальное количество карт — это сумма \(\frac{50}{1} + \frac{50}{2} + ... + \frac{50}{50}\).  
Давайте сначала посчитаем это значение, чтобы подтвердить максимальное количество карт, которые могут быть включены в запрос.




#include <bits/stdc++.h>

using namespace std;

int main() {
    int totalNumberOfPossibleCards = 0;
    for(int i = 1; i <= 50; i++) {
        totalNumberOfPossibleCards += 50 / i;
    }
    cout<<totalNumberOfPossibleCards;
}




Теперь у нас максимум \(MX\_NUMBER = 207\) карт для каждого запроса, даже если всего карт может быть до 30,000.  
Обозначим этап вычисления максимальных очков DQI для каждого дня как "запрос".

Вместо перебора всех возможных подмножеств, мы можем использовать динамическое программирование по принципу задачи о рюкзаке (knapsack).

Предположим, что мы уже обработали 1-ю, 2-ю, ..., и \((k-1)\)-ю карты.  
Обозначим \(dp[i]\) как максимальное количество очков DQI, которые можно заработать, имея \(i\) долларов.  

1. Начальное состояние:  
   Изначально \(dp[i] = 0\), то есть мы не заработали очков и не использовали карты.

2. Итоговое состояние:  
   После обработки всех карт ответом будет значение \(dp[B]\), где \(B\) — это доступный бюджет.

3. Как обновить \(dp\).  
   Пусть стоимость \(k\)-й карты равна \(C\), а количество очков DQI — \(P\).  
   Для обновления состояния \(dp[i]\), после использования карты \((C, P)\), мы введём массив \(next\_dp\) для вычисления следующего состояния. После этого \(dp\) обновляется до \(next\_dp\).

4. Обновление значений:
   - Случай, когда мы не рассматриваем карту \((C, P)\):  
     В этом случае \(next\_dp[i] = dp[i]\), так как мы не добавляем карту.
   - Случай, когда мы используем карту \((C, P)\):  
     Для всех возможных значений \(dp[i]\) (максимальные очки DQI с \(i\) долларами) добавление карты \((C, P)\) приводит к увеличению потраченной суммы до \(i + C\), а максимальные очки DQI увеличиваются до \(dp[i] + P\).  
     Тогда \(next\_dp[i + C] = \max(next\_dp[i + C], dp[i] + P)\).

Для каждого запроса сложность будет \(O(N + MX\_NUMBER \times MX\_DOLLARS)\).  
Здесь:
- \(N\) это верхняя граница числа карт в интервале [\(x_i, y_i\)],
- \(MX\_NUMBER = 207\) — максимальное количество карт, необходимых для запроса,
- \(MX\_DOLLARS = 50\) — максимальная сумма денег при обновлении \(next\_dp[i]\).

Итоговая сложность алгоритма будет \(O(D \times (N + MX\_NUMBER \times MX\_DOLLARS)) = O(D \times N)\).  
Так как \(D \leq 3000\), \(MX\_NUMBER \leq 207\), а \(MX\_DOLLARS \leq 50\), алгоритм допустим по времени.

Теперь давай удалим тестовый код, который использовался для вычисления \(MX\_NUMBER\), и напишем заготовку кода для чтения входных данных.




#include <bits/stdc++.h>

using namespace std;

const int MM = 30001;

int c[MM], v[MM];

int main() {
    int B, N, D; scanf("%d %d %d", &B, &N, &D);
    
    for(int i = 1; i <= N; i++) scanf("%d %d", c + i, v + i);
    
    while(D--) {
        int a, b, x, y; scanf("%d %d %d %d", &a, &b, &x, &y);
    }
}





Сначала, согласно условию запроса, обновим стоимость \(a\)-й карты на \(b\).




#include <bits/stdc++.h>

using namespace std;

const int MM = 30001;

int c[MM], v[MM];

int main() {
    int B, N, D; scanf("%d %d %d", &B, &N, &D);
    
    for(int i = 1; i <= N; i++) scanf("%d %d", c + i, v + i);
    
    while(D--) {
        int a, b, x, y; scanf("%d %d %d %d", &a, &b, &x, &y);
        
        c[a] = b;
    }
}





Давайте сохраним обязательные карты для каждого запроса. Сначала мы можем сохранить все доступные карты (карты, находящиеся в диапазоне индексов \([x_i, y_i]\)) в массиве pq.

Как я уже упоминал во втором блоке, нам не нужны все карты; нам нужно только \(\frac{B}{c}\) карт с наибольшими очками DQI, так как наша цель — максимизировать общую сумму очков DQI от покупок. Здесь \(c\) обозначает стоимость карты, а \(\frac{B}{c}\) — это максимальное количество обязательных карт с этой стоимостью.

Как можно выбрать \(\frac{B}{c}\) карт с наибольшими очками DQI? Это просто: можно использовать метод nth_element, который эффективно переставляет элементы таким образом, чтобы топ \(\frac{B}{c}\) карт оказался в начале массива.




#include <bits/stdc++.h>
#define y second
#define x first

using namespace std;
using pii = pair<int, int>;

const int NN = 51, MM = 30001;

int c[MM], v[MM];
vector<int> pq[NN];
vector<pii> vec;

int main() {
    int B, N, D; scanf("%d %d %d", &B, &N, &D);
    
    for(int i = 1; i <= N; i++) scanf("%d %d", c + i, v + i);
    
    while(D--) {
        int a, b, x, y; scanf("%d %d %d %d", &a, &b, &x, &y);
        
        c[a] = b;
        
        for(int i = 1; i <= B; i++) pq[i].clear();
        
        for(int i = x; i <= y; i++) {
            if(c[i] <= B) pq[c[i]].push_back(v[i]);
        }
        
        vec.clear();
        for(int i = 1; i <= B; i++) {
            int max_num = B / i;
            if (pq[i].size() > max_num) {
                nth_element(pq[i].begin(), pq[i].begin() + max_num, pq[i].end(), greater<int>());
                pq[i].resize(max_num);
            }
            for (int val : pq[i]) vec.push_back({i, val});
        }
    }
}





Давайте реализуем обработку возможных карт пошагово. Предположим, что на данный момент мы уже реализовали 1-ю, 2-ю, ..., и \((k-1)\)-ю карты.

На этом этапе обозначим \(dp[i]\) как максимальное количество очков DQI, которые можно заработать, имея \(i\) долларов.

Начальное состояние: \(dp[i] = 0\), когда ещё ни одна карта не была использована.

Итоговый ответ будет равен \(dp[B]\) после того, как будут обработаны все возможные карты.




#include <bits/stdc++.h>
#define y second
#define x first

using namespace std;
using pii = pair<int, int>;

const int NN = 51, MM = 30001;

int c[MM], v[MM];
vector<int> pq[NN];
vector<pii> vec;
int dp[NN];

int main() {
    int B, N, D; scanf("%d %d %d", &B, &N, &D);
    
    for(int i = 1; i <= N; i++) scanf("%d %d", c + i, v + i);
    
    while(D--) {
        int a, b, x, y; scanf("%d %d %d %d", &a, &b, &x, &y);
        
        c[a] = b;
        
        for(int i = 1; i <= B; i++) pq[i].clear();
        
        for(int i = x; i <= y; i++) {
            if(c[i] <= B) pq[c[i]].push_back(v[i]);
        }
        
        vec.clear();
        for(int i = 1; i <= B; i++) {
            int max_num = B / i;
            if (pq[i].size() > max_num) {
                nth_element(pq[i].begin(), pq[i].begin() + max_num, pq[i].end(), greater<int>());
                pq[i].resize(max_num);
            }
            for (int val : pq[i]) vec.push_back({i, val});
        }
        
        for(int i = 0; i <= B; i++) dp[i] = 0;
        for(pii p: vec) {
            int C = p.x, P = p.y;
            
        }
        
        printf("%d\n", dp[B]);
    }
}





Как я объяснял в блоке 5, переход осуществляется следующим образом:

\(\bull\) Случай, когда мы не рассматриваем текущую карту \((C, P)\):  
В этом случае \(next\_dp[i]\) просто равен \(dp[i]\).
\(\bull\) Случай, когда мы учитываем текущую карту \((C, P)\):  
Сначала мы можем пройтись по всем возможным значениям \(dp[i]\). Здесь \(dp[i]\) представляет максимальные очки DQI, которые мы можем получить с \(i\) долларами, используя 1-ю, 2-ю, ..., и \((k-1)\)-ю карты.  
Добавляя карту \((C, P)\), мы можем максимизировать \(next\_dp[i + C]\) как \(dp[i] + P\). Это происходит потому, что, заработав \(dp[i]\) очков DQI с \(i\) долларами, покупка карты \((C, P)\) изменяет общую сумму на \(i + C\), и максимальные очки DQI увеличиваются с \(dp[i]\) до \(dp[i] + P\).

Мы рассчитали \(next\_dp\), и теперь можем обновить \(dp\) до \(next\_dp\).




#include <bits/stdc++.h>
#define y second
#define x first

using namespace std;
using pii = pair<int, int>;

const int NN = 51, MM = 30001;

int c[MM], v[MM];
vector<int> pq[NN];
vector<pii> vec;
int dp[NN], next_dp[NN];

int main() {
    int B, N, D; scanf("%d %d %d", &B, &N, &D);
    
    for(int i = 1; i <= N; i++) scanf("%d %d", c + i, v + i);
    
    while(D--) {
        int a, b, x, y; scanf("%d %d %d %d", &a, &b, &x, &y);
        
        c[a] = b;
        
        for(int i = 1; i <= B; i++) pq[i].clear();
        
        for(int i = x; i <= y; i++) {
            if(c[i] <= B) pq[c[i]].push_back(v[i]);
        }
        
        vec.clear();
        for(int i = 1; i <= B; i++) {
            int max_num = B / i;
            if (pq[i].size() > max_num) {
                nth_element(pq[i].begin(), pq[i].begin() + max_num, pq[i].end(), greater<int>());
                pq[i].resize(max_num);
            }
            for (int val : pq[i]) vec.push_back({i, val});
        }
        
        for(int i = 0; i <= B; i++) dp[i] = 0;
        for(pii p: vec) {
            int C = p.x, P = p.y;
            
            for(int i = 0; i <= B; i++) next_dp[i] = dp[i];
            for(int i = 0; i <= B; i++) if(i + C <= B) {
                next_dp[i + C] = max(next_dp[i + C], dp[i] + P);
            }
            for(int i = 0; i <= B; i++) dp[i] = next_dp[i];
        }
        
        printf("%d\n", dp[B]);
    }
}





5 5 3
9 6
1 5
2 3
3 11
2 7
1 1 1 4
4 6 3 5
4 1 1 4




Давайте рассмотрим особый крайний случай, где \(B, N, D\) находятся на своих минимальных значениях: \(B = N = D = 1\).

1 1 1
1 1
1 2 1 1

В этом тестовом случае у Боско бюджет составляет 1 доллар, и он может купить только одну карту, стоимость которой составляет 1 доллар и которая дает 1 очко DQI. Однако в единственный доступный день цена карты увеличивается до 2 долларов, что делает её недоступной. Поэтому ожидаемый вывод равен "0", так как он не может купить ни одной карты.




1 1 1
1 1
1 2 1 1